@page "/recursos"
@using WebGrillaBlazor.DTOs
@using WebGrillaBlazor.ApiClient
@inject ApiClientRecurso ApiClient

<h3>Gestion de Recusos</h3>

<div class="row mb-3">
    <div class="col-2">
        <Button Color="ButtonColor.Success" Size="ButtonSize.Small" @onclick="AddRecurso">+Recurso</Button>
    </div>
</div>

<!-- Grilla de Recursos -->

<Grid @ref="gridRecurso"
      TItem="RecursoDTO"
      Class="table table-hover table-bordered table-striped"
      DataProvider="GetAllRecurso"
      AllowPaging="true"
      PageSize="5"
      AllowSorting="true"
      AllowRowClick="true"
      OnRowDoubleClick="OnRecursoDobleClick"
      SelectionMode="GridSelectionMode.Single"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="RecursoDTO" HeaderText="IdRecurso" PropertyName="IdRecurso" SortKeySelector="item => item.IdRecurso">
            @context.IdRecurso
        </GridColumn>

        <GridColumn TItem="RecursoDTO" HeaderText="NroDocumento" PropertyName="Documento" SortKeySelector="item => item.NumeroDocumento">
            @context.NumeroDocumento
        </GridColumn>

        <GridColumn TItem="RecursoDTO" HeaderText="Nombre" PropertyName="Nombre" SortKeySelector="item => item.Nombre">
            @context.Nombre
        </GridColumn>

        <GridColumn TItem="RecursoDTO" HeaderText="Apellido" PropertyName="Apellido" SortKeySelector="item => item.Apellido">
            @context.Apellido
        </GridColumn>

        <GridColumn TItem="RecursoDTO" HeaderText="Ingreso" PropertyName="Ingreso" SortKeySelector="item => item.FechaIngreso">
            @context.FechaIngreso.ToString("dd-MM-yyyy")
        </GridColumn>

    </GridColumns>
</Grid>

<!-- Ficha Edicion Rol -->
<Modal @ref="_EdicionRecurso" UseStaticBackdrop="true" CloseOnEscape="false" Size="ModalSize.Large" />


@code {
    Modal _EdicionRecurso = default!;
    Grid<RecursoDTO> gridRecurso;
    IEnumerable<RecursoDTO> recursos;
    int currentIdRecurso = 0;

    protected override Task OnInitializedAsync()
    {

        Console.WriteLine("OnInitalizedAsync()");

        return base.OnInitializedAsync();
    }

    private async Task<GridDataProviderResult<RecursoDTO>> GetAllRecurso(GridDataProviderRequest<RecursoDTO> request)
    {
        Console.WriteLine("GetAllRecurso");

        if (recursos ==null)
            recursos = await ApiClient.GetAllAsync();

        return await Task.FromResult(request.ApplyTo(recursos));
    }

    private void OnRecursoDobleClick()
    {
        Console.WriteLine("OnRecursoDobleClick");

    }

    //--------------------------------
    // Para la creacion de un recurso
    //--------------------------------

    private async Task AddRecurso()
    {
        var lista = recursos.ToList();
        var nuevo = CreateRecurso();
        lista.Add(nuevo);
        recursos = lista;
        await gridRecurso.RefreshDataAsync();
    }

    private RecursoDTO CreateRecurso()
    {
        var numero = recursos!.Max(x => x.IdRecurso) + 1;

        var nuevo = new RecursoDTO();

        nuevo.IdRecurso = 0;
        nuevo.Nombre = $"Nombre Nuevo {numero}";
        nuevo.Apellido= $"Apellido Nuevo {numero}";
        nuevo.IdTipoDocumento = 1;
        nuevo.IdEquipoDesarrollo = 1;
        nuevo.IdRol = 1;
        nuevo.PerfilSeguridad = "resource";
        nuevo.CorreoElectronico = "nuevo@censys.com";
        nuevo.FechaIngreso = DateTime.Today;
        nuevo.NumeroDocumento = 11789123;

        return nuevo;
    }

    //-------------------------------
    // Para la edicion de un recurso
    //-------------------------------

    private async Task OnRecursoDobleClick(GridRowEventArgs<RecursoDTO> args)
    {
        Console.WriteLine("Evento OnRecursoClick");
        var param = new Dictionary<string, object>();
        param.Add("OnClickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, OnCloseModalEdicionRecurso));
        param.Add("recurso", args.Item);
        await _EdicionRecurso.ShowAsync<FichaRecurso>(title: "Edicion Recurso", parameters: param);

    }

    private async Task OnCloseModalEdicionRecurso()
    {
        Console.WriteLine("OnCloseModalEdicionRecurso()");
        await _EdicionRecurso.HideAsync(); // Ocultar el formulario de Edicion
        await RefreshGrid(); // Refrescar la grilla

    }

    private async Task RefreshGrid()
    {
        recursos= null; // Limpiar la caché local de roles
        await gridRecurso.RefreshDataAsync();
        StateHasChanged(); // Forzar la actualización de la grilla
    }

    //-------------------
    // Prueba de Onclick
    //-------------------

    private async Task OnRowClick(GridRowEventArgs<RecursoDTO> args)
    {
        Console.WriteLine($"OnRowClick Rol current: {currentIdRecurso} nuevo: {args.Item.IdRol} ");
        currentIdRecurso = args.Item.IdRol;
    }

}
