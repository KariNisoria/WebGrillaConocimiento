@using WebGrillaBlazor.DTOs
@using WebGrillaBlazor.ApiClient
@inject ApiClientGeneric<TipoDocumentoDTO> _apiClient

<EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Id:</label>
        <label class="col-md-10">@tipodocumento.IdTipoDocumento</label>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Nombre:</label>
        <div class="col-md-10">
            <TextInput @bind-Value="@tipodocumento.Nombre" Placeholder="Ingrese el nombre"></TextInput>
        </div>
    </div>

</EditForm>

<div class="row">
    <div class="col-md-12 text-right">
        <Button Type="ButtonType.Button" Color="ButtonColor.Success" @onclick="ModificarTipoDocumento">Grabar</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Warning" @onclick="EliminarTipoDocumento">Eliminar</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="OnClickCallBack"> Cerrar</Button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="row mt-3">
        <Alert Color="AlertColor.Danger">@errorMessage</Alert>
    </div>
}

@code {
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallBack { get; set; }
    [Parameter] public TipoDocumentoDTO tipodocumento { get; set; }
    private EditContext editContext;

    private string errorMessage = "";
    private System.Timers.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"OnInitializedAsync() idTipoDocmento: {tipodocumento.IdTipoDocumento}");

        editContext = new EditContext(tipodocumento);

        var existeTipoDocumento = await ExisteTipoDocumento();

        Console.WriteLine($"OnInitializedAsync() existTipoDocumento: {existeTipoDocumento}");

        if (!existeTipoDocumento)
        {
            Console.WriteLine("No existe TipoDocumento");
            await AltaTipoDocumento();
        }

        base.OnInitialized();
    }

    public void HandleOnValidSubmit()
    {
        // additional check
        if (editContext.Validate())
        {
            // do something
            // submit the form
            Console.WriteLine("Form submitted successfully");
        }
    }

    private async Task<bool> ExisteTipoDocumento()
    {
        Console.WriteLine("ExisteTipoDocumento()");
        var encontrado = await _apiClient.GetByIdAsync(tipodocumento.IdTipoDocumento);
        if (encontrado == null)
        {
            Console.WriteLine("Retorna false");
            return false;
        }
        Console.WriteLine($"ExisteTipoDocumento() variable idTipoDocumento: {encontrado.IdTipoDocumento}");
        return (encontrado.IdTipoDocumento != null);
    }

    private async Task AltaTipoDocumento()
    {
        Console.WriteLine("AltaTipoDocumento()");
        var nuevo = await _apiClient.CreateAsync(tipodocumento);
        tipodocumento.IdTipoDocumento = nuevo.IdTipoDocumento;
    }

    private async Task ModificarTipoDocumento()
    {
        Console.WriteLine("ModificarTipoDocumento()");
        await _apiClient.UpdateAsync(tipodocumento.IdTipoDocumento, tipodocumento);
    }

    private async Task EliminarTipoDocumento()
    {
        Console.WriteLine("EliminarTipoDocumento()");
        //var resultado = await _apiClient.DeleteAsync(tipodocumento.IdTipoDocumento);
        await _apiClient.DeleteAsync(tipodocumento.IdTipoDocumento);

        /*if (!resultado.IsSuccess)
        {
            Console.WriteLine("Error en el borrado");
            errorMessage = resultado.Error; //muestra el mensaje de la api

            // Inicia Temporizador
            _timer = new System.Timers.Timer(3000); // 3000ms = 3 segundos
            _timer.Elapsed += async (sender, e) =>
            {
                errorMessage = ""; // retorna a vacio
                StateHasChanged();
            };
            _timer.Start();
        }
        else*/
        {
            // Notificar al componente padre para cerrar la ficha
            if (OnClickCallBack.HasDelegate)
            {
                await OnClickCallBack.InvokeAsync(null); // Dispara el callback
            }
        }

    }
}
